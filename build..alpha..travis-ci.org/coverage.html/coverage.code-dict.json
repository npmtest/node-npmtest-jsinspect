{"/home/travis/build/npmtest/node-npmtest-jsinspect/test.js":"/* istanbul instrument in package npmtest_jsinspect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsinspect/lib.npmtest_jsinspect.js":"/* istanbul instrument in package npmtest_jsinspect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsinspect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsinspect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsinspect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsinspect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsinspect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsinspect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsinspect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jsinspect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsinspect.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jsinspect.__dirname + '/lib.npmtest_jsinspect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/index.js":"module.exports = {\r\n  Inspector: require('./lib/inspector'),\r\n  reporters: require('./lib/reporters')\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/inspector.js":"var util         = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar fs           = require('fs');\nvar parse        = require('./parser').parse;\nvar Match        = require('./match');\nvar NodeUtils    = require('./nodeUtils');\nvar crypto       = require('crypto');\nvar stable       = require('stable');\n\nclass Inspector extends EventEmitter {\n  /**\n   * Creates a new Inspector, which extends EventEmitter. filePaths is expected\n   * to be an array of string paths. Also accepts an options object with any\n   * combination of the following: threshold, identifiers literals, and\n   * minInstances. Threshold indicates the minimum number of nodes to analyze.\n   * Identifiers indicates whether or not the nodes in a match should also have\n   * matching identifiers, and literals whether or not literal values should\n   * match. minInstances specifies the min number of instances for a match.\n   * An instance of Inspector emits the following events: start, match and end.\n   *\n   * @constructor\n   * @extends EventEmitter\n   *\n   * @param {string[]} filePaths The files on which to run the inspector\n   * @param {object}   [opts]    Options to set for the inspector\n   */\n  constructor(filePaths, opts) {\n    super();\n    opts = opts || {};\n\n    this._filePaths    = filePaths || [];\n    this._threshold    = opts.threshold || 30;\n    this._identifiers  = opts.identifiers;\n    this._literals     = opts.literals;\n    this._minInstances = opts.minInstances || 2;\n    this._map          = Object.create(null);\n    this._fileContents = {};\n    this._traversals   = {};\n    this.numFiles      = this._filePaths.length;\n  }\n\n  /**\n   * Runs the inspector on the given file paths, as provided in the constructor.\n   * Emits a start event, followed by a series of match events for any detected\n   * similarities, and an end event on completion.\n   *\n   * @fires Inspector#start\n   * @fires Inspector#match\n   * @fires Inspector#end\n   */\n  run() {\n    this.emit('start');\n\n    // File contents are split to allow for specific line extraction\n    this._filePaths.forEach((filePath) => {\n      var src = fs.readFileSync(filePath, {encoding: 'utf8'});\n      this._fileContents[filePath] = src.split('\\n');\n      try {\n        var syntaxTree = parse(src, filePath);\n      } catch (err) {\n        return console.error(err.message);\n      }\n      this._traversals[filePath] = NodeUtils.getDFSTraversal(syntaxTree);\n      this._walk(syntaxTree, (nodes) => this._insert(nodes));\n    });\n\n    this._analyze();\n    this.emit('end');\n  }\n\n  /**\n   * Walks a given node's AST, building up arrays of nodes that meet the\n   * inspector's threshold. When found, the callback is invoked and passed\n   * the array of nodes.\n   *\n   * @private\n   *\n   * @param {Node}     node The node to traverse\n   * @param {function} fn   The callback to invoke\n   */\n  _walk(node, fn) {\n    NodeUtils.walkSubtrees(node, (node, parent, ancestors) => {\n      var state = ancestors.concat(node);\n      if (NodeUtils.isAMD(state) ||\n          NodeUtils.isCommonJS(state) ||\n          NodeUtils.isES6ModuleImport(state) ||\n          NodeUtils.isES6ClassBoilerplate(state)) {\n        return;\n      }\n\n      var nodes = NodeUtils.getDFSTraversal(node, this._threshold);\n      if (nodes.length === this._threshold) {\n        fn(nodes);\n      }\n\n      this._walkSiblings(node, fn);\n    });\n  }\n\n  /**\n   * Walks sibling nodes under a parent, grouping their DFS traversals, and\n   * invoking the callback for those that wouldn't otherwise meet the threshold.\n   * Helpful for nodes like BlockStatements that hold a sequence. Note that\n   * this will generate overlapping instances, and so _omitOverlappingInstances\n   * helps cleanup the results.\n   *\n   * @private\n   *\n   * @param {Node}     node The node to traverse\n   * @param {function} fn   The callback to invoke\n   */\n  _walkSiblings(parent, fn) {\n    // group siblings that wouldn't otherwise meet threshold\n    var children = NodeUtils.getChildren(parent);\n    var n = this._threshold;\n\n    for (let i = 0; i < children.length - 1; i++) {\n      let nodes = NodeUtils.getDFSTraversal(children[i], n);\n      if (nodes.length === n) continue;\n\n      for (let j = i + 1; j < children.length; j++) {\n        nodes = nodes.concat(NodeUtils.getDFSTraversal(children[j], n));\n        if (nodes.length >= n) {\n          fn(nodes.slice(0, n));\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Generates a key based on the combined types of each of the supplied nodes.\n   * Pushes the array to another array at the generated key in _map. Nodes\n   * are updated to keep a reference to all their occurrences in _map.\n   *\n   * @private\n   *\n   * @param {Node[]} nodes\n   */\n  _insert(nodes) {\n    var key = this._getMapKey(nodes);\n\n    nodes.forEach(node => {\n      if (!node.occurrences) {\n        node.occurrences = {};\n      }\n      if (!node.occurrences[key]) {\n        node.occurrences[key] = [];\n      }\n      node.occurrences[key].push(nodes);\n    });\n\n    if (!this._map[key]) {\n      this._map[key] = [];\n    }\n\n    this._map[key].push(nodes);\n  }\n\n  /**\n   * Traverses the keys at which the various nodes are stored. A key containing\n   * an array of more than a single entry indicates a potential match. The nodes\n   * are then grouped if identifier matching is enabled. A match results in the\n   * relevant nodes being removed from any future results. This pruning ensures\n   * that we only include the greatest common parent in a set of matches.\n   *\n   * @private\n   *\n   * @fires Inspector#match\n   */\n  _analyze() {\n    var keys = Object.keys(this._map)\n      .filter(key => this._map[key].length >= this._minInstances);\n\n    // Need to use a stable sort to ensure parent nodes are traversed\n    // before children when lengths are equal\n    var sortedKeys = stable(keys, (a, b) => {\n      return this._map[b].length - this._map[a].length;\n    });\n\n    for (let key of sortedKeys) {\n      if (!this._map[key] || this._map[key].length < this._minInstances) {\n        continue;\n      }\n\n      let nodeArrays = this._map[key].slice(0);\n      this._omitOverlappingInstances(nodeArrays);\n\n      // groups will be of type Node[][][]\n      let groups = [nodeArrays];\n      if (this._identifiers) {\n        groups = this._groupByMatchingIdentifiers(groups);\n      }\n      if (this._literals) {\n        groups = this._groupByMatchingLiterals(groups);\n      }\n\n      for (let i = 0; i < groups.length; i++) {\n        if (groups[i].length < this._minInstances) continue;\n\n        this._expand(groups[i]);\n        let match = new Match(groups[i]);\n        match.populateLines(this._fileContents);\n        this.emit('match', match);\n        this._prune(groups[i]);\n      }\n    }\n  }\n\n  /**\n   * Removes overlapping instances from a group of node arrays. That is,\n   * if one instance has nodes abcd, and another has bcde, then bcde will\n   * be removed from the array.\n   *\n   * @private\n   *\n   * @param {Node[][]} nodeArrays\n   */\n  _omitOverlappingInstances(nodeArrays) {\n    var set = new Set();\n\n    var hasOverlap = (nodes) => {\n      return nodes.some(node => set.has(node));\n    };\n\n    var addNodes = (nodes) => {\n      nodes.forEach(node => set.add(node));\n    };\n\n    for (let i = 0; i < nodeArrays.length; i++) {\n      if (hasOverlap(nodeArrays[i])) {\n        nodeArrays.splice(i--, 1);\n        continue;\n      } else {\n        addNodes(nodeArrays[i]);\n      }\n    }\n  }\n\n  /**\n   * Iterates over the multi-dimensional array of nodes, and returns a new\n   * array grouping them based on matching identifiers.\n   *\n   * @private\n   *\n   * @param   {Node[][][]} groups\n   * @returns {Node[][][]}\n   */\n  _groupByMatchingIdentifiers(groups) {\n    return this._group(groups, (nodes) => {\n      return nodes\n        .filter(node => node.name)\n        .map(node => node.name)\n        .join(':');\n    });\n  }\n\n  /**\n   * Iterates over the multi-dimensional array of nodes, and returns a new\n   * array grouping them based on matching literals.\n   *\n   * @private\n   *\n   * @param   {Node[][][]} groups\n   * @returns {Node[][][]}\n   */\n  _groupByMatchingLiterals(groups) {\n    return this._group(groups, (nodes) => {\n      return nodes\n        .filter(node => node.type.includes('Literal'))\n        .map(node => node.value)\n        .join(':');\n    });\n  }\n\n  /**\n   * Expands each instance of a match to the largest common sequence of nodes\n   * with the same type, and optionally identifiers. Each array of nodes is\n   * modified in place.\n   *\n   * @private\n   *\n   * @param {Node[][]} nodeArrays\n   */\n  _expand(nodeArrays) {\n    var traversals = nodeArrays.map(nodes => {\n      return this._traversals[nodes[0].loc.filename];\n    });\n\n    var positions = nodeArrays.map((nodes, i) => {\n      var last = nodes[nodes.length - 1];\n      return traversals[i].indexOf(last);\n    });\n\n    var incr = (pos) => pos + 1;\n    var getNode = (pos, i) => traversals[i][pos];\n    var alreadyIncluded = (nodes) => {\n      return nodes.some(node => {\n        return nodeArrays.some(array => array.indexOf(node) !== -1)\n      });\n    };\n\n    var isComplete = (nodes) => {\n      return (!NodeUtils.typesMatch(nodes) || alreadyIncluded(nodes)) ||\n        (this._identifiers && !NodeUtils.identifiersMatch(nodes)) ||\n        (this._literals && !NodeUtils.literalsMatch(nodes));\n    };\n\n    while (true) {\n      positions = positions.map(incr);\n      let nodes = positions.map(getNode);\n      if (isComplete(nodes)) return;\n      nodeArrays.forEach((array, i) => array.push(nodes[i]));\n    }\n  }\n\n  /**\n   * Removes the nodes from consideration in any additional matches.\n   *\n   * @private\n   *\n   * @param {Node[][]} nodeArrays\n   */\n  _prune(nodeArrays) {\n    for (let i = 0; i < nodeArrays.length; i++) {\n      let nodes = nodeArrays[i];\n      for (let j = 0; j < nodes.length; j++) {\n        this._removeNode(nodes[j]);\n      }\n    }\n  }\n\n  /**\n   * Removes all occurrences of a given node.\n   *\n   * @private\n   *\n   * @param {Node} node The node to remove\n   */\n  _removeNode(node) {\n    for (let key in node.occurrences) {\n      for (let i = 0; i < node.occurrences[key].length; i++) {\n      if (!this._map[key]) break;\n        let index = this._map[key].indexOf(node.occurrences[key][i]);\n        if (index > -1) {\n          this._map[key].splice(index, 1);\n        }\n\n        // Delete empty buckets\n        if (!this._map[key].length) {\n          delete this._map[key];\n        }\n      }\n\n      delete node.occurrences[key];\n    }\n  }\n\n  /**\n   * Generates a key based on the type of each of the passed nodes, returned\n   * as a base64-encoded sha1 hash.\n   *\n   * @private\n   *\n   * @param   {Node[]} nodes The nodes for which to generate the key\n   * @returns {string}\n   */\n  _getMapKey(nodes) {\n    var key = nodes[0].type;\n    var length = nodes.length;\n\n    // Significantly faster than a map & join\n    for (var i = 1; i < length; i++) {\n      key += ':' + nodes[i].type;\n    }\n\n    // Prefer shorter key lengths (base64 < hex)\n    return crypto.createHash('sha1').update(key).digest('base64');\n  }\n\n  /**\n   * Accepts a multi-dimensional array of nodes and groups them based on the\n   * supplied function, which is expected to return a string.\n   *\n   * @private\n   *\n   * @param   {Node[][][]} groups The groups of nodes to further group\n   * @param   {function}   fn     Synchronous function for generating group ids\n   * @returns {Node[][][]}\n   */\n  _group(groups, fn) {\n    var res = [];\n    var map = Object.create(null);\n\n    for (let i = 0; i < groups.length; i++) {\n      for (let j = 0; j < groups[i].length; j++) {\n        let id = fn(groups[i][j]);\n        if (!map[id]) {\n          map[id] = [];\n        }\n\n        map[id].push(groups[i][j]);\n      }\n\n      for (let key in map) {\n        res.push(map[key]);\n      }\n\n      map = Object.create(null);\n    }\n\n    return res;\n  }\n}\n\nmodule.exports = Inspector;\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/parser.js":"var babylon = require('babylon');\nvar debug   = require('./debug');\n\n/**\n * Parses the specified src string with babylon, returning the resulting AST\n * and skipping the undocumented File root node, which is neither Babylon AST\n * nor ESTree spec compliant.\n *\n * @param {string} src      Source to parse\n * @param {string} filePath Path to the file\n */\nexports.parse = function(src, filePath) {\n  debug(`parsing ${filePath}`);\n  try {\n    return attempt(\n      () => _parse(src, filePath, 'script'),\n      () => _parse(src, filePath, 'module')\n    );\n  } catch (err) {\n    let ctx = getErrorContext(err, src);\n    throw new Error(`Couldn't parse ${filePath}: ${err.message}${ctx}`);\n  }\n};\n\nfunction attempt(...fns) {\n  for (let i = 0; i < fns.length; i++) {\n    try {\n      return fns[i]();\n    } catch (err) {\n      if (i === fns.length - 1) throw err;\n    }\n  }\n}\n\nfunction _parse(src, filePath, sourceType) {\n  return babylon.parse(src, {\n    allowReturnOutsideFunction: true,\n    allowImportExportEverywhere: true,\n    sourceType: sourceType,\n    sourceFilename: filePath,\n    plugins: ['jsx', 'flow', 'doExpressions', 'objectRestSpread', 'decorators',\n      'classProperties', 'exportExtensions', 'asyncGenerators', 'functionBind',\n      'functionSent', 'dynamicImport']\n  }).program;\n}\n\nfunction getErrorContext(err, src) {\n  if (!err.loc || !err.loc.line || err.loc.column >= 100) return '';\n\n  var line = src.split('\\n')[err.loc.line - 1];\n  var caret = ' '.repeat(err.loc.column) + '^';\n\n  return `\\n${line}\\n${caret}`;\n}\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/debug.js":"module.exports = function debug(str) {\n  if (process.env.DEBUG) {\n    console.error(str);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/match.js":"var strip     = require('strip-indent');\nvar crypto    = require('crypto');\nvar NodeUtils = require('./nodeUtils');\n\nclass Match {\n  /**\n   * Creates a new Match.\n   *\n   * @constructor\n   *\n   * @param {Node[][]} nodeArrays Multi-dimensional array of nodes\n   */\n  constructor(nodeArrays) {\n    this.hash = this._getHash(nodeArrays);\n    this.instances = this._generateInstances(nodeArrays);\n  }\n\n  /**\n   * Populates each match instance with a lines property containing the\n   * relevant source code lines.\n   *\n   * @param {object} fileContents The file paths and their contents\n   */\n   populateLines(fileContents) {\n    this.instances.forEach(instance => {\n      var lines = fileContents[instance.filename]\n        .slice(instance.start.line - 1, instance.end.line)\n        .join('\\n');\n\n      instance.lines = strip(lines);\n    });\n   }\n\n  /**\n   * Generates a hash for a match.\n   *\n   * @private\n   *\n   * @param   {Node[][]} nodeArrays   Multi-dimensional array of nodes\n   * @returns {String}\n   */\n  _getHash(nodeArrays) {\n    var str = nodeArrays\n      .reduce((a, b) => a.concat(b))\n      .map(node => node.name || node.type)\n      .join(':');\n\n    return crypto.createHash('sha1').update(str).digest('hex');\n  }\n\n  /**\n   * Returns an array of objects containing the filename, start, end, and\n   * lines associated with all instances of a match. Due to sibling traversal,\n   * the end line must be searched for among the nodes, and isn't always\n   * defined by the last node in the array.\n   *\n   * @private\n   *\n   * @param   {Node[][]} nodeArrays   Multi-dimensional array of nodes\n   * @returns {object}\n   */\n  _generateInstances(nodeArrays) {\n    return nodeArrays.map((nodes) => {\n      var filename = nodes[0].loc.filename;\n\n      var start = nodes.reduce((res, curr) => {\n        return NodeUtils.isBefore(curr, res) ? curr : res;\n      }).loc.start;\n\n      // The end line requires more careful approximation so as not to\n      // accidentally include a large number of irrelevant src lines\n      // from a large node\n      var base = nodes.map(node => node.loc.start)\n        .reduce((res, curr) => (res.line > curr.line) ? res : curr);\n\n      var last = nodes[nodes.length - 1];\n      var lastEnd = last.loc.end;\n      if (lastEnd.line > base.line && !NodeUtils.getChildren(last).length) {\n        base = lastEnd;\n      }\n\n      var maxEnd = nodes.map(node => node.loc.end)\n        .reduce((res, curr) => (res.line > curr.line) ? res : curr);\n      var end = maxEnd.line - base.line <= 2 ? maxEnd : base;\n\n      return {filename, start, end};\n    });\n  }\n}\n\nmodule.exports = Match;\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/nodeUtils.js":"var stable = require('stable');\n\n/**\n * Cache for getChildren, holding the keys to traverse for a given Node type.\n * Some JSX node types are hardcoded to ensure correct property traversal order.\n * For example, this ensures that a JSXElement's children are traversed prior\n * to the closing element.\n */\nvar childKeys = {\n  JSXElement: ['openingElement', 'extra', 'children', 'closingElement'],\n  JSXOpeningElement: ['name', 'attributes'],\n  JSXAttribute: ['name', 'value'],\n};\n\nclass NodeUtils {\n  /**\n   * Walks a root node's subtrees using DFS, invoking the passed callback with\n   * three args: node, parent, and ancestors. The root node, presumably Program,\n   * is ignored.\n   *\n   * @param {Node}     root The root node of the AST to traverse\n   * @param {function} fn   Callback to invoke\n   */\n  static walkSubtrees(root, fn) {\n    var visit = (node, parent, ancestors) => {\n      fn(node, parent, ancestors);\n      ancestors = ancestors.concat(node);\n      NodeUtils.getChildren(node).forEach((child) => {\n        visit(child, node, ancestors);\n      });\n    };\n\n    NodeUtils.getChildren(root).forEach((child) => {\n      visit(child, null, []);\n    });\n  }\n\n  /**\n   * Returns an array of nodes in the passed AST, traversed using DFS. Accepts\n   * an optional maximum number, n, of nodes to return. The returned array\n   * always begins with the root node.\n   *\n   * @param   {Node}   node The root node of the AST to traverse\n   * @param   {int}    [n]  Optional max number of nodes to return\n   * @returns {Node[]}\n   */\n  static getDFSTraversal(node, n) {\n    var res = [];\n\n    var dfs = (node) => {\n      if (n && res.length >= n) return;\n      res.push(node);\n      NodeUtils.getChildren(node).forEach(dfs);\n    };\n\n    dfs(node);\n\n    return res.slice(0, n);\n  }\n\n  /**\n   * Returns an array of nodes in the passed AST, traversed using BFS. Accepts\n   * an optional maximum number, n, of nodes to return. The returned array\n   * always begins with the root node.\n   *\n   * @param   {Node}   node The root node of the AST to traverse\n   * @param   {int}    [n]  Optional max number of nodes to return\n   * @returns {Node[]}\n   */\n  static getBFSTraversal(node, n) {\n    var queue = [node];\n    var res = [node];\n\n    while (queue.length) {\n      node = queue.shift();\n\n      if (n && res.length >= n) {\n        return res.slice(0, n);\n      }\n\n      let children = NodeUtils.getChildren(node) || [];\n      for (let i = 0; i < children.length; i++) {\n        queue.push(children[i]);\n        res.push(children[i]);\n      }\n    }\n\n    return res.slice(0, n);\n  }\n\n  /**\n   * Returns a given node's children as an array of nodes. Designed for use\n   * with ESTree/Babylon spec ASTs.\n   *\n   * @param   {Node}   The node for which to retrieve its children\n   * @returns {Node[]} An array of child nodes\n   */\n  static getChildren(node) {\n    var res = [];\n\n    if (!childKeys[node.type]) {\n      childKeys[node.type] = Object.keys(node).filter((key) => {\n        return key !== 'loc' && typeof node[key] === 'object';\n      });\n    }\n\n    // Ignore null values, as well as JSText nodes incorrectly generated\n    // by babylon that contain only newlines and spaces\n    var filterIgnored = (nodes) => nodes.filter(node => {\n      return node && (node.type !== 'JSXText' || node.value.trim());\n    });\n\n    childKeys[node.type].forEach((key) => {\n      var val = node[key];\n      if (val && val.type) {\n        res.push(val);\n      } else if (val instanceof Array) {\n        res = res.concat(filterIgnored(val));\n      }\n    });\n\n    return res;\n  }\n\n  /**\n   * Returns whether or not the first node appears before the second, by\n   * comparing both their starting lines and columns.\n   *\n   * @param   {object} a\n   * @param   {object} b\n   * @returns {bool}\n   */\n  static isBefore(a, b) {\n    a = a.loc.start;\n    b = b.loc.start;\n    return a.line < b.line || (a.line === b.line && a.column < b.column);\n  }\n\n  /**\n   * Returns whether or not the nodes are part of an ES6 module import.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static isES6ModuleImport(nodes) {\n    return nodes[0] && nodes[0].type === 'ImportDeclaration';\n  }\n\n  /**\n   * Returns whether or not the nodes belong to class boilerplate.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static isES6ClassBoilerplate(nodes) {\n    var last = nodes[nodes.length - 1];\n    return last.type === 'ClassDeclaration' || last.type === 'ClassBody';\n  }\n\n  /**\n   * Returns whether or not the nodes are part of an AMD require or define\n   * expression.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static isAMD(nodes) {\n    var hasAMDName = function(node) {\n      if (!node || !node.name) return;\n      return (node.name === 'define' || node.name === 'require');\n    }\n\n    // Iterate from last node\n    for (let i = nodes.length - 1; i >= nodes.length - 5; i--) {\n      if (!nodes[i]) {\n        return false;\n      } else if (nodes[i].type !== 'ExpressionStatement' ||\n          nodes[i].expression.type !== 'CallExpression') {\n        continue;\n      }\n\n      // Handle basic cases where define/require are a property\n      let callee = nodes[i].expression.callee;\n      if (hasAMDName(callee)) {\n        return true;\n      } else if (callee.type === 'MemberExpression' &&\n          hasAMDName(callee.property)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether or not the nodes are part of a CommonJS require statement.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static isCommonJS(nodes) {\n    if (!nodes[0]) {\n      return false;\n    } else if (nodes[0].type === 'ExpressionStatement' &&\n        nodes[0].expression.type === 'CallExpression' &&\n        nodes[0].expression.callee.name === 'require') {\n      return true;\n    } else if (nodes[0].type === 'VariableDeclaration' && nodes[0].declarations) {\n      for (let j = 0; j < nodes[0].declarations.length; j++) {\n        let declaration = nodes[0].declarations[j];\n\n        if (declaration.type === 'VariableDeclarator' &&\n            declaration.init &&\n            declaration.init.type === 'CallExpression' &&\n            declaration.init.callee.name === 'require') {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether or not all nodes are of the same type.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static typesMatch(nodes) {\n    return nodes.every(node => node && node.type === nodes[0].type);\n  }\n\n  /**\n   * Returns whether or not all nodes have the same identifier.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static identifiersMatch(nodes) {\n    return nodes[0] && nodes.every(node => {\n      return node && node.name === nodes[0].name;\n    });\n  }\n\n  /**\n   * Returns whether or not all nodes have the same literal value.\n   *\n   * @param   {Node[]}  nodes\n   * @returns {boolean}\n   */\n  static literalsMatch(nodes) {\n    var isLiteral = (node) => {\n      return node.type.includes('Literal') || node.type === 'JSXText';\n    }\n\n    return nodes[0] && nodes.every(node => {\n      return node && (!isLiteral(node) || node.value === nodes[0].value);\n    });\n  }\n}\n\nmodule.exports = NodeUtils;\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/reporters/index.js":"module.exports = {\n  default: require('./default.js'),\n  json:    require('./json.js'),\n  pmd:     require('./pmd.js')\n};\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/reporters/default.js":"var util         = require('util');\nvar chalk        = require('chalk');\nvar BaseReporter = require('./base');\n\nclass DefaultReporter extends BaseReporter {\n  /**\n   * The default reporter, which displays both file and line information for\n   * each given match.\n   *\n   * @constructor\n   *\n   * @param {Inspector} inspector Instance on which to register its listeners\n   * @param {object}    opts      Options to set for the reporter\n   */\n  constructor(inspector, opts) {\n    opts = opts || {};\n    super(inspector, opts);\n    this._registerSummary();\n  }\n\n  /**\n   * Returns the string output to print for the given reporter. The string\n   * contains the number of instances associated with the match and the files\n   * and lines involved.\n   *\n   * @private\n   *\n   * @param   {Match}  match The inspector match to output\n   * @returns {string} The formatted output\n   */\n  _getOutput(match) {\n    var instances = match.instances;\n    var output = '\\n' + '-'.repeat(60) + '\\n\\n' +\n      chalk.bold(`Match - ${instances.length} instances\\n`);\n\n    instances.forEach((instance) => {\n      var location = this._getFormattedLocation(instance);\n      var lines = this._getLines(instance);\n      output += `\\n${location}\\n${chalk.grey(lines)}\\n`;\n    });\n\n    return output;\n  }\n}\n\nmodule.exports = DefaultReporter;\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/reporters/base.js":"var util  = require('util');\nvar path  = require('path');\nvar chalk = require('chalk');\n\nclass BaseReporter {\n  /**\n   * A base reporter from which all others inherit. Registers a listener on the\n   * passed inspector instance for tracking the number of matches found.\n   *\n   * @constructor\n   *\n   * @param {Inspector} inspector Instance on which to register its listeners\n   * @param {object}    opts      Options to set for the reporter\n   */\n  constructor(inspector, opts) {\n    opts = opts || {};\n\n    this._inspector = inspector;\n    this._found = 0;\n    this._truncate = (opts.truncate === 0) ? 0 : (opts.truncate || 100);\n    this._writableStream = opts.writableStream || process.stdout;\n    this._registerListener();\n\n    inspector.on('end', () => {\n      if (this._writableStream === process.stdout) return;\n      // give the reporter a chance to write its last chunk by\n      // deferring end to the next tick\n      process.nextTick(() => this._writableStream.end());\n    });\n  }\n\n  /**\n   * Registers a listener to the \"match\" event exposed by the Inspector\n   * instance. Increments _found for each match emitted, and invokes the\n   * object's _getOutput method, writing it to stdout.\n   */\n  _registerListener() {\n    this._inspector.on('match', (match) => {\n      this._found++;\n      this._writableStream.write(this._getOutput(match));\n    });\n  }\n\n  /**\n   * Registers a listener that prints a final summary outlining the number of\n   * matches detected, as well as the number of files analyzed.\n   */\n  _registerSummary() {\n    this._inspector.on('end', () => {\n      var numFiles = this._inspector.numFiles;\n      var files = (numFiles > 1) ? 'files' : 'file';\n      var matches = (this._found > 1) ? 'matches' : 'match';\n      var summary;\n\n      if (!this._found) {\n        summary = chalk.green(util.format(\n          '\\nNo matches found across %d %s', numFiles, files));\n      } else {\n        summary = chalk.red(util.format('\\n%d %s found across %d %s',\n          this._found, matches, numFiles, files));\n      }\n\n      this._writableStream.write(summary + '\\n');\n    });\n  }\n\n  /**\n   * Returns a string containing the path to the file in which the nodes are\n   * located, as well as the lines on which the nodes exist.\n   *\n   * @param   {Object} instance\n   * @returns {string}\n   */\n  _getFormattedLocation(instance) {\n    var filePath = this._getRelativePath(instance.filename);\n    return `${filePath}:${instance.start.line},${instance.end.line}`;\n  }\n\n  /**\n   * Returns the lines associated with an instance.\n   *\n   * @param   {Object} instance\n   * @returns {string}\n   */\n  _getLines(instance) {\n    var lines = instance.lines;\n    if (this._truncate) {\n      lines = lines.split('\\n').slice(0, this._truncate).join('\\n');\n    }\n\n    return lines;\n  }\n\n  /**\n   * Returns the relative path for a file.\n   *\n   * @param   {string} filePath\n   * @returns {string}\n   */\n  _getRelativePath(filePath) {\n    if (filePath.charAt(0) === '/') {\n      filePath = path.relative(process.cwd(), filePath);\n    }\n\n    return filePath;\n  }\n\n  /**\n   * Returns the absolute path for a file.\n   *\n   * @param   {string} filePath\n   * @returns {string}\n   */\n  _getAbsolutePath(filePath) {\n    if (filePath.charAt(0) !== '/') {\n      filePath = path.resolve(process.cwd(), filePath);\n    }\n\n    return filePath;\n  }\n}\n\nmodule.exports = BaseReporter;\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/reporters/json.js":"var util         = require('util');\nvar path         = require('path');\nvar chalk        = require('chalk');\nvar BaseReporter = require('./base');\n\nclass JSONReporter extends BaseReporter {\n  /**\n   * A JSON reporter, which displays both file and line information for\n   * each given match.\n   *\n   * @constructor\n   *\n   * @param {Inspector} inspector Instance on which to register its listeners\n   * @param {object}    opts      Options to set for the reporter\n   */\n  constructor(inspector, opts) {\n    opts = opts || {};\n    super(inspector, opts);\n\n    var enabled = chalk.enabled;\n\n    inspector.on('start', () => {\n      chalk.enabled = false;\n      this._writableStream.write('[');\n    });\n\n    inspector.on('end', () => {\n      chalk.enabled = enabled;\n      this._writableStream.write(']\\n');\n    });\n  }\n\n  /**\n   * Returns the string output to print for the given reporter. The formatted\n   * JSON string contains the number of instances associated with the match and\n   * the files and lines involved.\n   *\n   * @private\n   *\n   * @param   {Match}  match The inspector match to output\n   * @returns {string} The formatted output\n   */\n  _getOutput(match) {\n    var output = (this._found > 1) ? ',\\n' : '';\n\n    output += JSON.stringify({\n      id: match.hash,\n      instances: match.instances.map(instance => {\n        return {\n          path: this._getRelativePath(instance.filename),\n          lines: [instance.start.line, instance.end.line],\n          code: this._getLines(instance)\n        };\n      })\n    });\n\n    return output;\n  }\n}\n\nmodule.exports = JSONReporter;\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/lib/reporters/pmd.js":"var util         = require('util');\nvar path         = require('path');\nvar chalk        = require('chalk');\nvar BaseReporter = require('./base');\n\nclass PMDReporter extends BaseReporter {\n  /**\n   * A PMD CPD XML reporter, which tries to fit jsinspect's output to something\n   * CI tools might expect from PMD.\n   *\n   * @constructor\n   *\n   * @param {Inspector} inspector Instance on which to register its listeners\n   * @param {object}    opts      Options to set for the reporter\n   */\n  constructor(inspector, opts) {\n    opts = opts || {};\n    super(inspector, opts);\n\n    var enabled = chalk.enabled;\n\n    inspector.on('start', () => {\n      chalk.enabled = false;\n      this._writableStream.write(\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n        '<pmd-cpd>\\n'\n      );\n    });\n\n    inspector.on('end', () => {\n      chalk.enabled = enabled;\n      this._writableStream.write('</pmd-cpd>\\n');\n    });\n  }\n\n  /**\n   * Returns an XML string containing a <duplication> element, with <file>\n   * children indicating the instance locations, and <codefragment> to hold the\n   * lines.\n   *\n   * @private\n   *\n   * @param   {Match}  match The inspector match to output\n   * @returns {string} The formatted output\n   */\n  _getOutput(match) {\n    var output = (this._found > 1) ? '\\n' : '';\n    var codeFragment = '';\n    var instances = match.instances;\n    var totalLines = this._getTotalLines(match);\n\n    output += `<duplication lines=\"${totalLines}\" id=\"${match.hash}\">\\n`;\n    instances.forEach((instance) => output += this._getFile(instance));\n\n    output += '<codefragment>';\n    instances.forEach((instance) => {\n      var location = this._getFormattedLocation(instance);\n      var lines = this._getLines(instance);\n      codeFragment += `\\n${location}\\n${chalk.grey(lines)}\\n`;\n    });\n    output += `${this._escape(codeFragment)}</codefragment>\\n</duplication>\\n`;\n\n    return output;\n  }\n\n  /**\n   * Returns the total number of lines spanned by a match.\n   *\n   * @param   {Match} match\n   * @returns {int}\n   */\n  _getTotalLines(match) {\n    return match.instances.reduce((res, curr) => {\n      return res + curr.end.line - curr.start.line + 1;\n    }, 0);\n  }\n\n  /**\n   * Returns an XML string containing the path to the file in which the instance\n   * is located, as well as its starting line. Absolute paths are required for\n   * Jenkins.\n   *\n   * @param   {object} instance\n   * @returns {string}\n   */\n  _getFile(instance) {\n    var filePath = this._getAbsolutePath(instance.filename);\n    return `<file path=\"${filePath}\" line=\"${instance.start.line}\"/>\\n`;\n  }\n\n  /**\n   * Returns an escaped string for use within XML.\n   *\n   * @param   {string} string The string to escape\n   * @returns {string} The escaped string\n   */\n  _escape(string) {\n    var escaped = {\n      \"'\": '&apos;',\n      '\"': '&quot;',\n      '&': '&amp;',\n      '>': '&gt;',\n      '<': '&lt;'\n    };\n\n    return string.replace(/(['\"&><])/g, (string, char) => {\n      return escaped[char];\n    });\n  }\n}\n\nmodule.exports = PMDReporter;\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/helpers.js":"var fs    = require('fs');\nvar parse = require('../lib/parser').parse;\nvar chalk = require('chalk');\n\nvar output = '';\nvar enabled = chalk.enabled;\nvar write = process.stdout.write;\nvar parseCache = {};\n\nmodule.exports = {\n  trimlines: function(str) {\n    return str.split('\\n').map(str => str.trim()).join('\\n');\n  },\n\n  captureOutput: function() {\n    chalk.enabled = false;\n    output = '';\n    process.stdout.write = function(string) {\n      if (!string) return;\n      output += string;\n    };\n  },\n\n  collectMatches: function(inspector) {\n    var array = [];\n    inspector.on('match', function(match) {\n      array.push(match);\n    });\n    return array;\n  },\n\n  getOutput: function() {\n    return output;\n  },\n\n  restoreOutput: function() {\n    chalk.enabled = enabled;\n    process.stdout.write = write;\n  },\n\n  parse: function(filePath) {\n    if (parseCache[filePath]) return parseCache[filePath];\n\n    // Skip the root Program node\n    var src = fs.readFileSync(filePath, {encoding: 'utf8'});\n    var ast = parse(src, filePath).body;\n    parseCache[filePath] = ast;\n\n    return ast;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/inspectorSpec.js":"var expect       = require('expect.js');\nvar EventEmitter = require('events').EventEmitter;\nvar Inspector    = require('../lib/inspector');\nvar fixtures     = require('./fixtures');\n\ndescribe('Inspector', function() {\n  // Used to test emitted events\n  var found;\n  var listener = function(match) {\n    found.push(match);\n  };\n\n  beforeEach(function() {\n    found = [];\n  });\n\n  describe('constructor', function() {\n    it('inherits from EventEmitter', function() {\n      expect(new Inspector()).to.be.an(EventEmitter);\n    });\n\n    it('accepts an array of file paths', function() {\n      var filePaths = ['path1.js', 'path2.js'];\n      var inspector = new Inspector(filePaths);\n      expect(inspector._filePaths).to.be(filePaths);\n    });\n\n    it('assigns a default threshold of 30', function() {\n      var inspector = new Inspector([]);\n      expect(inspector._threshold).to.be(30);\n    });\n\n    it('accepts an options object', function() {\n      var opts = {threshold: 12};\n      var inspector = new Inspector([], opts);\n      expect(inspector._threshold).to.be(opts.threshold);\n    });\n  });\n\n  describe('run', function() {\n    it('emits a start event', function() {\n      var emitted;\n      var inspector = new Inspector([fixtures.intersection]);\n      inspector.on('start', function() {\n        emitted = true;\n      });\n\n      inspector.run();\n      expect(emitted).to.be(true);\n    });\n\n    it('emits an end event', function() {\n      var emitted;\n      var inspector = new Inspector([fixtures.intersection]);\n      inspector.on('end', function() {\n        emitted = true;\n      });\n\n      inspector.run();\n      expect(emitted).to.be(true);\n    });\n\n    it('emits the \"match\" event when a match is found', function() {\n      var inspector = new Inspector([fixtures.intersection], {\n        threshold: 10\n      });\n\n      inspector.on('match', listener);\n      inspector.run();\n      expect(found).to.have.length(1);\n    });\n  });\n\n  it('can find an exact match between instances', function() {\n    var inspector = new Inspector([fixtures.intersection], {\n      threshold: 15\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 1, column: 0});\n    expect(match.instances[0].end).to.eql({line: 5, column: 1});\n    expect(match.instances[1].start).to.eql({line: 7, column: 0});\n    expect(match.instances[1].end).to.eql({line: 11, column: 1});\n  });\n\n  it('can find the largest match between two instances', function() {\n    var inspector = new Inspector([fixtures.redundantIntersection], {\n      threshold: 11\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 1, column: 0});\n    expect(match.instances[0].end).to.eql({line: 9, column: 1});\n    expect(match.instances[1].start).to.eql({line: 11, column: 0});\n    expect(match.instances[1].end).to.eql({line: 19, column: 1});\n  });\n\n  it('supports ES6', function() {\n    var inspector = new Inspector([fixtures.es6ClassExport], {\n      threshold: 20\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 2, column: 2});\n    expect(match.instances[0].end).to.eql({line: 6, column: 3});\n    expect(match.instances[1].start).to.eql({line: 8, column: 2});\n    expect(match.instances[1].end).to.eql({line: 12, column: 3});\n  });\n\n  it('supports JSX', function() {\n    var inspector = new Inspector([fixtures.jsxTodo], {\n      threshold: 20\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 3, column: 0});\n    expect(match.instances[0].end).to.eql({line: 9, column: 1});\n    expect(match.instances[1].start).to.eql({line: 11, column: 0});\n    expect(match.instances[1].end).to.eql({line: 17, column: 1});\n  });\n\n  it('supports Flow', function() {\n    var inspector = new Inspector([fixtures.flowIntersection], {\n      threshold: 20\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].start).to.eql({line: 1, column: 0});\n    expect(match.instances[0].end).to.eql({line: 5, column: 1});\n    expect(match.instances[1].start).to.eql({line: 7, column: 0});\n    expect(match.instances[1].end).to.eql({line: 11, column: 1});\n  });\n\n  it('includes the lines with the match', function() {\n    var inspector = new Inspector([fixtures.intersection], {\n      threshold: 11,\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n\n    var match = found[0];\n    expect(found).to.have.length(1);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0].lines).to.be(\n      'function intersectionA(array1, array2) {\\n' +\n      '  array1.filter(function(n) {\\n' +\n      '    return array2.indexOf(n) != -1;\\n' +\n      '  });\\n' +\n      '}'\n    );\n    expect(match.instances[1].lines).to.be(\n      'function intersectionB(arrayA, arrayB) {\\n' +\n      '  arrayA.filter(function(n) {\\n' +\n      '    return arrayB.indexOf(n) != -1;\\n' +\n      '  });\\n' +\n      '}'\n    );\n  });\n\n  it('ignores matches with less than the supplied minimum', function() {\n    var inspector = new Inspector([fixtures.matches], {\n      threshold: 2,\n      minInstances: 3\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n    expect(found).to.have.length(1);\n    expect(found[0].instances).to.have.length(3);\n  });\n\n  it('ignores CommonJS require statements', function() {\n    var inspector = new Inspector([fixtures.commonjs], {\n      threshold: 3\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n    expect(found).to.have.length(0);\n  });\n\n  it('ignores AMD define expressions', function() {\n    var inspector = new Inspector([fixtures.amd], {\n      threshold: 5\n    });\n\n    inspector.on('match', listener);\n    inspector.run();\n    expect(found).to.have.length(0);\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/matchSpec.js":"var expect    = require('expect.js');\nvar Match     = require('../lib/match');\nvar fixtures  = require('./fixtures');\nvar NodeUtils = require('../lib/nodeUtils');\nvar crypto    = require('crypto');\n\ndescribe('Match', function() {\n  var nodeArrays = [\n    [{\n      type: 'BlockStatement',\n      loc: {filename: 'a', start: {line: 1, column: 0}, end: {line: 2, column: 3}}\n    }],\n    [{\n      type: 'Literal',\n      loc: {filename: 'a', start: {line: 3, column: 0}, end: {line: 3, column: 3}}\n    }]\n  ];\n\n  it('has a hash based on the node types', function() {\n    var match = new Match(nodeArrays);\n    var str = 'BlockStatement:Literal';\n    var sha1 = crypto.createHash('sha1').update(str).digest('hex');\n    expect(match.hash).to.be(sha1);\n  });\n\n  it('stores instance objects containing filename, start and end', function() {\n    var match = new Match(nodeArrays);\n    expect(match.instances).to.have.length(2);\n    expect(match.instances[0]).to.eql(nodeArrays[0][0].loc);\n  });\n\n  it('uses the minimum start value of nodes in an instance', function() {\n    var match = new Match([[\n      {\n        type: 'a',\n        loc: {filename: 'a', start: {line: 2, column: 0}, end: {line: 2, column: 0}}\n      },\n      {\n        type: 'a',\n        loc: {filename: 'a', start: {line: 1, column: 2}, end: {line: 1, column: 2}}\n      },\n      {\n        type: 'a',\n        loc: {filename: 'a', start: {line: 1, column: 0}, end: {line: 1, column: 0}}\n      },\n      {\n        type: 'a',\n        loc: {filename: 'a', start: {line: 3, column: 0}, end: {line: 3, column: 0}}\n      }\n    ]]);\n    expect(match.instances[0].start).to.eql({line: 1, column: 0});\n  });\n\n  describe('populateLines', function() {\n    it('adds the relevant source lines as a prop to each instance', function() {\n      var match = new Match(nodeArrays);\n      match.populateLines({\n        a: ['foo', 'bar', 'baz']\n      });\n      expect(match.instances[0].lines).to.eql('foo\\nbar');\n      expect(match.instances[1].lines).to.eql('baz');\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/nodeUtilsSpec.js":"var expect    = require('expect.js');\nvar fixtures  = require('./fixtures');\nvar helpers   = require('./helpers');\nvar NodeUtils = require('../lib/nodeUtils');\n\ndescribe('NodeUtils', function() {\n  describe('walkSubtrees', function() {\n    it('walks each child node using DFS', function() {\n      var res = [];\n      var root = helpers.parse(fixtures.simple)[0];\n      NodeUtils.walkSubtrees(root, node => res.push(node.type));\n      expect(res).to.eql([\n        'ExpressionStatement',\n        'UpdateExpression',\n        'Identifier',\n        'ExpressionStatement',\n        'CallExpression',\n        'Identifier'\n      ]);\n    });\n  });\n\n  describe('getDFSTraversal', function() {\n    it('returns the DFS traversal of the AST', function() {\n      var res = [];\n      var ast = helpers.parse(fixtures.simple)[0];\n      var res = NodeUtils.getDFSTraversal(ast).map(node => node.type);\n      expect(res).to.eql([\n        'BlockStatement',\n        'ExpressionStatement',\n        'UpdateExpression',\n        'Identifier',\n        'ExpressionStatement',\n        'CallExpression',\n        'Identifier'\n      ]);\n    });\n  });\n\n  describe('getBFSTraversal', function() {\n    it('returns the BFS traversal of the AST', function() {\n      var res = [];\n      var ast = helpers.parse(fixtures.simple)[0];\n      var res = NodeUtils.getBFSTraversal(ast).map(node => node.type);\n      expect(res).to.eql([\n        'BlockStatement',\n        'ExpressionStatement',\n        'ExpressionStatement',\n        'UpdateExpression',\n        'CallExpression',\n        'Identifier',\n        'Identifier'\n      ]);\n    });\n  });\n\n  describe('getChildren', function() {\n    it('returns the children of a Node', function() {\n      var parent = helpers.parse(fixtures.intersection)[0];\n      var res = NodeUtils.getChildren(parent);\n      // Children should be the three identifiers intersectionA,\n      // array1, and array2, followed by a block statement\n      expect(res.map(node => node.type)).to.eql([\n        'Identifier',\n        'Identifier',\n        'Identifier',\n        'BlockStatement'\n      ])\n    });\n\n    it('ignores null children', function() {\n      var parent = helpers.parse(fixtures.nullChildren)[1].expression.left;\n      // parent.elements is an array with a leading null that should be ignored,\n      // followed by an identifier\n      var res = NodeUtils.getChildren(parent);\n      expect(res).to.have.length(1);\n      expect(res[0].type).to.be('Identifier');\n    });\n\n    it('ignores empty JSXText nodes', function() {\n      var parent = helpers.parse(fixtures.jsxNesting)[0].expression;\n      var res = NodeUtils.getChildren(parent);\n      res.forEach(node => expect(node.type).not.to.be('JSXText'));\n    });\n  });\n\n  describe('isBefore', function() {\n    describe('given nodes with different line numbers', function() {\n      it('returns true if the first node has a lower line number', function() {\n        var res = NodeUtils.isBefore(\n          {loc: {start: {line: 0, column: 0}}},\n          {loc: {start: {line: 1, column: 0}}}\n        );\n        expect(res).to.be(true);\n      });\n\n      it('returns false if the first node has a higher numbered line', function() {\n        var res = NodeUtils.isBefore(\n          {loc: {start: {line: 1, column: 0}}},\n          {loc: {start: {line: 0, column: 0}}}\n        );\n        expect(res).to.be(false);\n      });\n    });\n\n    describe('given nodes with the same line number', function() {\n      it('returns true if the first node has a lower column number', function() {\n        var res = NodeUtils.isBefore(\n          {loc: {start: {line: 0, column: 0}}},\n          {loc: {start: {line: 0, column: 1}}}\n        );\n        expect(res).to.be(true);\n      });\n\n      it('returns false if the first node has a higher column number', function() {\n        var res = NodeUtils.isBefore(\n          {loc: {start: {line: 0, column: 1}}},\n          {loc: {start: {line: 0, column: 0}}}\n        );\n        expect(res).to.be(false);\n      });\n    });\n  });\n\n  describe('isES6ModuleImport', function() {\n    it('returns true for an import declaration', function() {\n      // ImportDeclaration\n      var nodes = [helpers.parse(fixtures.es6Module)[0]];\n      expect(NodeUtils.isES6ModuleImport(nodes)).to.be(true);\n    });\n\n    it('returns false for export declaration', function() {\n      // ExportNamedDeclaration\n      var nodes = [helpers.parse(fixtures.es6Module)[1]];\n      expect(NodeUtils.isES6ModuleImport(nodes)).to.be(false);\n    });\n\n    it('returns false otherwise', function() {\n      var nodes = helpers.parse(fixtures.commonjs);\n      expect(NodeUtils.isES6ModuleImport(nodes)).to.be(false);\n    });\n  });\n\n  describe('isAMD', function() {\n    it('returns true for an expression containing a define', function() {\n      // First expression is define\n      var nodes = [helpers.parse(fixtures.amd)[0]];\n      expect(NodeUtils.isAMD(nodes)).to.be(true);\n    });\n\n    it('returns true for an expression containing a define', function() {\n      // Third expression is require\n      var nodes = [helpers.parse(fixtures.amd)[2]];\n      expect(NodeUtils.isAMD(nodes)).to.be(true);\n    });\n\n    it('returns true even if the function is a property', function() {\n      var nodes = [helpers.parse(fixtures.amd)[4]];\n      expect(NodeUtils.isAMD(nodes)).to.be(true);\n    });\n\n    it('returns true even if a nested property', function() {\n      var nodes = [helpers.parse(fixtures.amd)[6]];\n      expect(NodeUtils.isAMD(nodes)).to.be(true);\n    });\n\n    it('returns false otherwise', function() {\n      var nodes = helpers.parse(fixtures.commonjs);\n      expect(NodeUtils.isAMD(nodes)).to.be(false);\n    });\n  });\n\n  describe('isCommonJS', function() {\n    it('returns true for an expression containing a require', function() {\n      // First node is an ExpressionStatement\n      var nodes = [helpers.parse(fixtures.commonjs)[0]];\n      expect(NodeUtils.isCommonJS(nodes)).to.be(true);\n    });\n\n    it('returns true for a declaration containing a require', function() {\n      // Second node is a VariableDeclaration\n      var nodes = [helpers.parse(fixtures.commonjs)[1]];\n      expect(NodeUtils.isCommonJS(nodes)).to.be(true);\n    });\n\n    it('returns false otherwise', function() {\n      var nodes = helpers.parse(fixtures.amd);\n      expect(NodeUtils.isCommonJS(nodes)).to.be(false);\n    });\n  });\n\n  describe('typesMatch', function() {\n    it('returns true if all node types match', function() {\n      var res = NodeUtils.typesMatch([\n        {type: 'a'}, {type: 'a'}, {type: 'a'}\n      ]);\n      expect(res).to.be(true);\n    });\n\n    it('returns false if not all node types match', function() {\n      var res = NodeUtils.typesMatch([\n        {type: 'a'}, {type: 'a'}, {type: 'b'}\n      ]);\n      expect(res).to.be(false);\n    });\n  });\n\n  describe('identifiersMatch', function() {\n    it('returns true if all node are matching identifiers', function() {\n      var res = NodeUtils.identifiersMatch([\n        {name: 'a'}, {name: 'a'}, {name: 'a'}\n      ]);\n      expect(res).to.be(true);\n    });\n\n    it('returns false if not all node names match', function() {\n      var res = NodeUtils.identifiersMatch([\n        {name: 'a'}, {name: 'a'}, {name: 'b'}\n      ]);\n      expect(res).to.be(false);\n    });\n  });\n\n  describe('literalsMatch', function() {\n    it('returns true if all literals have the same value', function() {\n      var res = NodeUtils.literalsMatch([\n        {type: 'Literal', value: 'a'},\n        {type: 'Literal', value: 'a'},\n        {type: 'Literal', value: 'a'}\n      ]);\n      expect(res).to.be(true);\n    });\n\n    it('returns false if not all literals have the same value', function() {\n      var res = NodeUtils.literalsMatch([\n        {type: 'Literal', value: 'a'},\n        {type: 'Literal', value: 'a'},\n        {type: 'Literal', value: 'b'}\n      ]);\n      expect(res).to.be(false);\n    });\n\n    it('treats JSXText as a literal', function() {\n      var res = NodeUtils.literalsMatch([\n        {type: 'JSXText', value: 'a'},\n        {type: 'JSXText', value: 'a'},\n        {type: 'JSXText', value: 'b'}\n      ]);\n      expect(res).to.be(false);\n    });\n\n    it('ignores the values of nodes which are not literals', function() {\n      var res = NodeUtils.literalsMatch([\n        {type: 'Foo', value: 'a'},\n        {type: 'Foo', value: 'a'},\n        {type: 'Foo', value: 'b'}\n      ]);\n      expect(res).to.be(true);\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/parserSpec.js":"var expect  = require('expect.js');\nvar helpers = require('./helpers');\nvar Parser  = require('../lib/parser');\n\ndescribe('parse', function() {\n  describe('on error', function() {\n    var src = '[_, = [1, 2, 3];';\n    var filePath = 'broken.js';\n\n    it('includes the filename of the file that failed to parse', function() {\n      var fn = () => Parser.parse(src, filePath);\n      expect(fn).to.throwException((err) => {\n        expect(err.message).to.contain(filePath);\n      });\n    });\n\n    it('includes a caret pointing to the unexpected token', function() {\n      var fn = () => Parser.parse(src, filePath);\n      expect(fn).to.throwException((err) => {\n        expect(err.message).to.contain(`${src}\\n    ^`);\n      });\n    });\n\n    it('does not include the src line if longer than 100 chars', function() {\n      var src = ' '.repeat(100) + ']';\n      var fn = () => Parser.parse(src, filePath);\n      expect(fn).to.throwException((err) => {\n        expect(err.message).not.to.contain(`^`);\n      });\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/reporters/baseSpec.js":"var expect       = require('expect.js');\nvar util         = require('util');\nvar chalk        = require('chalk');\nvar fixtures     = require('../fixtures');\nvar helpers      = require('../helpers');\nvar BaseReporter = require('../../lib/reporters/base');\nvar Inspector    = require('../../lib/inspector');\n\n// A simple TestReporter for testing the BaseReporter\nclass TestReporter extends BaseReporter {\n  constructor(inspector) {\n    super(inspector);\n    this._registerSummary();\n  }\n\n  _getOutput() {}\n}\n\ndescribe('BaseReporter', function() {\n  var inspector, reporter;\n\n  beforeEach(function() {\n    helpers.captureOutput();\n    inspector = new Inspector([fixtures.intersection], {\n      threshold: 15\n    });\n    reporter = new TestReporter(inspector);\n  });\n\n  afterEach(function() {\n    helpers.restoreOutput();\n  });\n\n  describe('constructor', function() {\n    it('accepts an inspector as an argument', function() {\n      expect(reporter._inspector).to.be(inspector);\n    });\n\n    it('registers a listener for the match event', function() {\n      expect(inspector.listeners('match')).to.have.length(1);\n    });\n  });\n\n  describe('given a match', function() {\n    it('increments the number found', function() {\n      inspector.emit('match', {});\n      helpers.restoreOutput();\n      expect(reporter._found).to.be(1);\n    });\n\n    it('invokes _getOutput', function() {\n      reporter._getOutput = function(match) {\n        return match;\n      };\n\n      inspector.emit('match', 'invoked');\n      helpers.restoreOutput();\n      expect(helpers.getOutput()).to.be('invoked');\n    });\n  });\n\n  describe('summary', function() {\n    it('can be printed on inspector end', function() {\n      inspector.run();\n      helpers.restoreOutput();\n      expect(helpers.getOutput()).to.not.be(null);\n    });\n\n    it('prints the correct results if no matches were found', function() {\n      inspector = new Inspector([fixtures.intersection], {\n        threshold: 40\n      });\n      var reporter = new TestReporter(inspector);\n\n      inspector.run();\n      helpers.restoreOutput();\n      expect(helpers.getOutput()).to.be('\\nNo matches found across 1 file\\n');\n    });\n\n    it('prints the correct results if matches were found', function() {\n      inspector.run();\n      helpers.restoreOutput();\n      expect(helpers.getOutput()).to.be('\\n1 match found across 1 file\\n');\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/reporters/defaultSpec.js":"var expect          = require('expect.js');\nvar util            = require('util');\nvar chalk           = require('chalk');\nvar fixtures        = require('../fixtures');\nvar helpers         = require('../helpers');\nvar DefaultReporter = require('../../lib/reporters/default');\nvar Inspector       = require('../../lib/inspector');\n\ndescribe('DefaultReporter', function() {\n  afterEach(function() {\n    helpers.restoreOutput();\n  });\n\n  describe('constructor', function() {\n    it('accepts an inspector as an argument', function() {\n      var inspector = new Inspector(['']);\n      var reporter = new DefaultReporter(inspector);\n      expect(reporter._inspector).to.be(inspector);\n    });\n  });\n\n  it('prints the summary on end', function() {\n    helpers.captureOutput();\n    var inspector = new Inspector([fixtures.intersection], {\n      threshold: 40\n    });\n    var reporter = new DefaultReporter(inspector);\n\n    inspector.run();\n    helpers.restoreOutput();\n\n    expect(helpers.getOutput()).to.be('\\nNo matches found across 1 file\\n');\n  });\n\n  describe('given a match', function() {\n    beforeEach(function() {\n      helpers.captureOutput();\n    });\n\n    it('prints the instances', function() {\n      var inspector = new Inspector([fixtures.intersection], {\n        threshold: 15\n      });\n      var reporter = new DefaultReporter(inspector);\n\n      inspector.removeAllListeners('end');\n      inspector.run();\n      helpers.restoreOutput();\n\n      var expected = `\n------------------------------------------------------------\n\nMatch - 2 instances\n\nspec/fixtures/intersection.js:1,5\nfunction intersectionA(array1, array2) {\n  array1.filter(function(n) {\n    return array2.indexOf(n) != -1;\n  });\n}\n\nspec/fixtures/intersection.js:7,11\nfunction intersectionB(arrayA, arrayB) {\n  arrayA.filter(function(n) {\n    return arrayB.indexOf(n) != -1;\n  });\n}\n`;\n\n      expect(helpers.getOutput()).to.be(expected);\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/reporters/jsonSpec.js":"var expect       = require('expect.js');\nvar util         = require('util');\nvar chalk        = require('chalk');\nvar concat       = require('concat-stream')\nvar fixtures     = require('../fixtures');\nvar helpers      = require('../helpers');\nvar JSONReporter = require('../../lib/reporters/json');\nvar Inspector    = require('../../lib/inspector');\n\ndescribe('JSONReporter', function() {\n  afterEach(function() {\n    helpers.restoreOutput();\n  });\n\n  describe('constructor', function() {\n    it('accepts an inspector as an argument', function() {\n      var inspector = new Inspector(['']);\n      var reporter = new JSONReporter(inspector);\n      expect(reporter._inspector).to.be(inspector);\n    });\n  });\n\n  it('prints valid json', function() {\n    var inspector = new Inspector([fixtures.smallLines], {\n      threshold: 1\n    });\n    var reporter = new JSONReporter(inspector);\n\n    helpers.captureOutput();\n    inspector.run();\n    helpers.restoreOutput();\n\n    JSON.parse(helpers.getOutput());\n  });\n\n  describe('given a match', function() {\n    beforeEach(function() {\n      helpers.captureOutput();\n    });\n\n    it('prints the instances and their location', function() {\n      var inspector = new Inspector([fixtures.smallLines], {\n        threshold: 1\n      });\n      var reporter = new JSONReporter(inspector);\n      var matches = helpers.collectMatches(inspector);\n\n      inspector.removeAllListeners('start');\n      inspector.removeAllListeners('end');\n\n      inspector.run();\n      helpers.restoreOutput();\n\n      var parsedOutput = JSON.parse(helpers.getOutput());\n      expect(parsedOutput).to.eql({\n        id: '8ee1b37f99571a8917be385c2924f659762c1349',\n        instances: [\n          {\n            path: 'spec/fixtures/smallLines.js',\n            lines: [1,1],\n            code: 'test = function() { return 1; };'\n          },\n          {\n            path: 'spec/fixtures/smallLines.js',\n            lines: [2,2],\n            code: 'test = function() { return 2; };'\n          },\n          {\n            path: 'spec/fixtures/smallLines.js',\n            lines: [3,3],\n            code: 'test = function() { return 3; };'\n          }\n        ]\n      });\n    });\n  });\n\n  it('can write to a custom stream', function(done) {\n    var inspector = new Inspector([fixtures.smallLines], {\n      threshold: 1\n    });\n    var concatStream = concat(onFinish);\n    var reporter = new JSONReporter(inspector, {\n      writableStream: concatStream\n    });\n    var matches = helpers.collectMatches(inspector);\n\n    inspector.run();\n\n    function onFinish(data) {\n      expect(JSON.parse(data)[0].id).to.be(\n        '8ee1b37f99571a8917be385c2924f659762c1349'\n      );\n      done();\n    }\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jsinspect/node_modules/jsinspect/spec/reporters/pmdSpec.js":"var expect      = require('expect.js');\nvar util        = require('util');\nvar chalk       = require('chalk');\nvar fixtures    = require('../fixtures');\nvar helpers     = require('../helpers');\nvar PMDReporter = require('../../lib/reporters/pmd');\nvar Inspector   = require('../../lib/inspector');\n\ndescribe('PMDReporter', function() {\n  afterEach(function() {\n    helpers.restoreOutput();\n  });\n\n  describe('constructor', function() {\n    it('accepts an inspector as an argument', function() {\n      var inspector, reporter;\n\n      inspector = new Inspector(['']);\n      reporter = new PMDReporter(inspector);\n      expect(reporter._inspector).to.be(inspector);\n    });\n  });\n\n  describe('given a match', function() {\n    beforeEach(function() {\n      helpers.captureOutput();\n    });\n\n    it('prints paths and line numbers in a duplication element', function() {\n      var inspector, reporter, matches;\n\n      inspector = new Inspector([fixtures.smallLines], {threshold: 1});\n      reporter = new PMDReporter(inspector);\n      matches = helpers.collectMatches(inspector);\n\n      inspector.removeAllListeners('start');\n      inspector.removeAllListeners('end');\n\n      inspector.run();\n      helpers.restoreOutput();\n\n      var expected = helpers.trimlines(\n        `<duplication lines=\"3\" id=\"${matches[0].hash}\">\n        <file path=\"${fixtures.smallLines}\" line=\"1\"/>\n        <file path=\"${fixtures.smallLines}\" line=\"2\"/>\n        <file path=\"${fixtures.smallLines}\" line=\"3\"/>\n        <codefragment>\n        spec/fixtures/smallLines.js:1,1\n        test = function() { return 1; };\n\n        spec/fixtures/smallLines.js:2,2\n        test = function() { return 2; };\n\n        spec/fixtures/smallLines.js:3,3\n        test = function() { return 3; };\n        </codefragment>\n        </duplication>\n      `);\n\n      expect(helpers.getOutput()).to.eql(expected);\n    });\n  });\n});\n"}